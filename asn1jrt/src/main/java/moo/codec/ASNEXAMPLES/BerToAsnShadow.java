/* This file was generated by asn1gen */

package moo.codec.ASNEXAMPLES;

import org.asn1gen.runtime.java.*;

import static org.asn1gen.runtime.java.Statics.*;

import moo.model.ASNEXAMPLES.*;
import static org.asn1gen.runtime.java.BerToAsn.*;
import static moo.codec.ASNEXAMPLES.BerToAsn.*;

@SuppressWarnings("unused")
public class BerToAsnShadow {

  public static Books decodePart_(final Books value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    ByteArrayWindow myWindow = window;
    ConsList<Book> children = ConsList.<Book>nil();

    while (myWindow.length > 0) {
      children = children.prepend(decode(Book.EMPTY, myWindow, consumed));
      myWindow = myWindow.from(consumed.value);
    }

    return new Books(children);
  }

  public static Books decode_(final Books value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Books.EMPTY;
  }

  public static BookPrice decodePart_(final BookPrice value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    /*return BerWriter.EMPTY
        .then(decode(value.isbn))
        .then(decode(value.price));*/
    return BookPrice.EMPTY;
  }

  public static BookPrice decode_(final BookPrice value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return BookPrice.EMPTY;
  }

  public static BookPrices decodePart_(final BookPrices value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    ByteArrayWindow myWindow = window;
    ConsList<Book> children = ConsList.<Book>nil();

    while (myWindow.length > 0) {
      children = children.prepend(decode(Book.EMPTY, myWindow, consumed));
      myWindow = myWindow.from(consumed.value);
    }

    return new BookPrices(children);
  }

  public static BookPrices decode_(final BookPrices value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return BookPrices.EMPTY;
  }

  public static BookCover decodePart_(final BookCover value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    final long intValue = TLV.longValue(window);

    if (intValue == BookCover.hardCover.value) {
      return BookCover.hardCover;
    } else if (intValue == BookCover.paperBack.value) {
      return BookCover.paperBack;
    } else {
      throw new AsnException();
    }
  }

  public static BookCover decode_(final BookCover value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    final DetailedTlvFrame detailedFrame = TLV.readTlv(window);
    final TlvFrame frame = detailedFrame.frame;

    if (frame.tagClass != TagClass.UNIVERSAL) {
      throw new AsnException();
    }

    if (frame.tagForm != TagForm.PRIMITIVE) {
      throw new AsnException();
    }

    if (frame.tagNo != 10) {
      throw new AsnException();
    }

    return decodePart(value, frame.value, consumed);
  }

  public static Book decodePart_(final Book value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    /*return BerWriter.EMPTY
        .then(decode(value.isbn))
        .then(decode(value.title))
        .then(decode(value.author))
        .then(decode(value.cover))
        .then(decode(value.isInPrint));*/
    return Book.EMPTY;
  }

  public static Book decode_(final Book value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Book.EMPTY;
  }

  public static Journals decodePart_(final Journals value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    ByteArrayWindow myWindow = window;
    ConsList<Journal> children = ConsList.<Journal>nil();

    while (myWindow.length > 0) {
      children = children.prepend(decode(Journal.EMPTY, myWindow, consumed));
      myWindow = myWindow.from(consumed.value);
    }

    return new Journals(children);
  }

  public static Journals decode_(final Journals value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Journals.EMPTY;
  }

  public static Item decodePart_(final Item value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    /*switch (value.choiceId()) {
    case 1:
      return decodePart((Book)value.element(), window);
    case 2:
      return decodePart((Journal)value.element(), window);
    default:
      throw new AsnException();
    }*/
    return Item.EMPTY;
  }

  public static Item decode_(final Item value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Item.EMPTY;
  }

  public static Journal decodePart_(final Journal value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    /*return BerWriter.EMPTY
        .then(decode(value.title))
        .then(decode(value.edition));*/
    return Journal.EMPTY;
  }

  public static Journal decode_(final Journal value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Journal.EMPTY;
  }

  public static Items decodePart_(final Items value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    ByteArrayWindow myWindow = window;
    ConsList<Item> children = ConsList.<Item>nil();

    while (myWindow.length > 0) {
      children = children.prepend(decode(Item.EMPTY, myWindow, consumed));
      myWindow = myWindow.from(consumed.value);
    }

    return new Items(children);
  }

  public static Items decode_(final Items value, final ByteArrayWindow window, final ReturnInteger consumed) throws AsnException {
    return Items.EMPTY;
  }
}
