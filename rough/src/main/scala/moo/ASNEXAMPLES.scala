/*GenScala.scala:13*//* This file was generated by asn1gen */

package moo

import org.asn1gen.{runtime => _rt_}
import moo.{meta => _meta_}
import org.asn1gen.runtime.Extras._

object ASNEXAMPLES {
  import moo.meta.{ASNEXAMPLES => _meta_}

  /*GenScala.scala:99*//*GenScala.scala:127*//*GenScala.scala:524*/

  case class Books(items: List[Book]) extends _rt_.AsnList {
    override def _desc: _meta_.Books = _meta_.Books

    def items(f: (List[Book] => List[Book])): Books =
      this.copy(items = f(this.items))
  }

  object Books extends Books(Nil) {
    def apply(items: Book*): Books = Books(items.toList)
  }
  /*GenScala.scala:99*//*GenScala.scala:127*/

  class BookPrice(
    /*GenScala.scala:592*/val isbn: _rt_.AsnOctetString,
    val price: _rt_.AsnInteger
  ) extends _rt_.AsnSequence {
    override def _desc: _meta_.BookPrice = _meta_.BookPrice

    def copy(
        /*GenScala.scala:649*/isbn: _rt_.AsnOctetString = this.isbn,
        price: _rt_.AsnInteger = this.price) = {
      BookPrice(
        /*GenScala.scala:631*/isbn,
        price)
    }

    override def equals(that: Any): Boolean = {
      val other = try {
        that.asInstanceOf[BookPrice]
      } catch {
        case e: ClassCastException => return false
      }
      this.equals(other: BookPrice)
    }

    def equals(that: BookPrice): Boolean = {
      if (this.isbn != that.isbn)return false
      if (this.price != that.price)return false
      return true
    }

    override def hashCode(): Int = return (
      0
      ^ this.isbn.hashCode
      ^ this.price.hashCode
    )

    /*GenScala.scala:670*//*GenScala.scala:694*/def isbn(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): BookPrice =
      this.copy(isbn = f(this.isbn))
    /*GenScala.scala:694*/def price(f: (_rt_.AsnInteger => _rt_.AsnInteger)): BookPrice =
      this.copy(price = f(this.price))


    override def _child(name: String): Any = name match {case "isbn" => isbn
      case "price" => price
      case _ => throw new Exception("Member '" + name + "' does not exist.")
    }
  }

  object BookPrice extends BookPrice(
    "",
    0L
  ) {
    def apply(
        /*GenScala.scala:613*/isbn: _rt_.AsnOctetString,
        price: _rt_.AsnInteger): BookPrice = {
      new BookPrice(/*GenScala.scala:631*/isbn,
        price)
    }
  }

  /*GenScala.scala:99*//*GenScala.scala:127*//*GenScala.scala:524*/

  case class BookPrices(items: List[Book]) extends _rt_.AsnList {
    override def _desc: _meta_.BookPrices = _meta_.BookPrices

    def items(f: (List[Book] => List[Book])): BookPrices =
      this.copy(items = f(this.items))
  }

  object BookPrices extends BookPrices(Nil) {
    def apply(items: Book*): BookPrices = BookPrices(items.toList)
  }
  /*GenScala.scala:99*//*GenScala.scala:127*/

  case class BookCover(_value: Long) extends _rt_.AsnEnumeration {
    override def _desc: _meta_.BookCover = _meta_.BookCover

    override def _shortName: Option[String] = {
      _value match {
        case 0 => Some("hardCover")
        case 1 => Some("paperBack")
        case _ => None
      }
    }
  }

  object BookCover extends BookCover(0) {
    /*GenScala.scala:498*/val hardCover = BookCover(0)
    val paperBack = BookCover(1)

    def of(name: String): BookCover = {
      name match {
        case "hardCover" => hardCover
        case "paperBack" => paperBack
        case _ => throw _rt_.BadEnumerationException(
          "Unrecogonised enumeration value + '" + name + "'")
      }
    }

    def of(value: Int): BookCover = {
      value match {
        case 0 => hardCover
        case 1 => paperBack
        case _ => BookCover(value)
      }
    }
  }

  /*GenScala.scala:498*/val hardCover = BookCover(0)
  val paperBack = BookCover(1)
  /*GenScala.scala:99*//*GenScala.scala:127*/

  class Book(
    /*GenScala.scala:592*/val isbn: _rt_.AsnOctetString,
    val title: _rt_.AsnOctetString,
    val author: _rt_.AsnOctetString,
    val cover: BookCover,
    val isInPrint: _rt_.AsnBoolean
  ) extends _rt_.AsnSequence {
    override def _desc: _meta_.Book = _meta_.Book

    def copy(
        /*GenScala.scala:649*/isbn: _rt_.AsnOctetString = this.isbn,
        title: _rt_.AsnOctetString = this.title,
        author: _rt_.AsnOctetString = this.author,
        cover: BookCover = this.cover,
        isInPrint: _rt_.AsnBoolean = this.isInPrint) = {
      Book(
        /*GenScala.scala:631*/isbn,
        title,
        author,
        cover,
        isInPrint)
    }

    override def equals(that: Any): Boolean = {
      val other = try {
        that.asInstanceOf[Book]
      } catch {
        case e: ClassCastException => return false
      }
      this.equals(other: Book)
    }

    def equals(that: Book): Boolean = {
      if (this.isbn != that.isbn)return false
      if (this.title != that.title)return false
      if (this.author != that.author)return false
      if (this.cover != that.cover)return false
      if (this.isInPrint != that.isInPrint)return false
      return true
    }

    override def hashCode(): Int = return (
      0
      ^ this.isbn.hashCode
      ^ this.title.hashCode
      ^ this.author.hashCode
      ^ this.cover.hashCode
      ^ this.isInPrint.hashCode
    )

    /*GenScala.scala:670*//*GenScala.scala:694*/def isbn(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): Book =
      this.copy(isbn = f(this.isbn))
    /*GenScala.scala:694*/def title(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): Book =
      this.copy(title = f(this.title))
    /*GenScala.scala:694*/def author(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): Book =
      this.copy(author = f(this.author))
    /*GenScala.scala:694*/def cover(f: (BookCover => BookCover)): Book =
      this.copy(cover = f(this.cover))
    /*GenScala.scala:694*/def isInPrint(f: (_rt_.AsnBoolean => _rt_.AsnBoolean)): Book =
      this.copy(isInPrint = f(this.isInPrint))


    override def _child(name: String): Any = name match {case "isbn" => isbn
      case "title" => title
      case "author" => author
      case "cover" => cover
      case "isInPrint" => isInPrint
      case _ => throw new Exception("Member '" + name + "' does not exist.")
    }
  }

  object Book extends Book(
    "",
    "",
    "",
    /* default */ paperBack,
    false
  ) {
    def apply(
        /*GenScala.scala:613*/isbn: _rt_.AsnOctetString,
        title: _rt_.AsnOctetString,
        author: _rt_.AsnOctetString,
        cover: BookCover,
        isInPrint: _rt_.AsnBoolean): Book = {
      new Book(/*GenScala.scala:631*/isbn,
        title,
        author,
        cover,
        isInPrint)
    }
  }

  /*GenScala.scala:99*//*GenScala.scala:127*//*GenScala.scala:524*/

  case class Journals(items: List[Journal]) extends _rt_.AsnList {
    override def _desc: _meta_.Journals = _meta_.Journals

    def items(f: (List[Journal] => List[Journal])): Journals =
      this.copy(items = f(this.items))
  }

  object Journals extends Journals(Nil) {
    def apply(items: Journal*): Journals = Journals(items.toList)
  }
  /*GenScala.scala:99*//*GenScala.scala:127*/abstract class Item(_element: Any) extends _rt_.AsnChoice {
    def _choice: Int
    /*GenScala.scala:883*//*GenScala.scala:894*/
    def book: Option[Book] = None
    /*GenScala.scala:894*/
    def journal: Option[Journal] = None
    /*GenScala.scala:793*//*GenScala.scala:844*/
    def book(f: (Book => Book)): Item = this

    def book(f: => Book): Item = Item_book(f)
    /*GenScala.scala:844*/
    def journal(f: (Journal => Journal)): Item = this

    def journal(f: => Journal): Item = Item_journal(f)
  }
  /*GenScala.scala:720*//*GenScala.scala:733*/

  case class Item_book(_element: Book) extends Item(_element) {
    override def _desc: _meta_.Item = _meta_.Item
    def _choice: Int = 1

    override def book: Option[Book] = Some(_element)

    override def book(f: (Book => Book)): Item = Item_book(f(_element))

    override def _choiceName: String = "book"
  }
  /*GenScala.scala:733*/

  case class Item_journal(_element: Journal) extends Item(_element) {
    override def _desc: _meta_.Item = _meta_.Item
    def _choice: Int = 2

    override def journal: Option[Journal] = Some(_element)

    override def journal(f: (Journal => Journal)): Item = Item_journal(f(_element))

    override def _choiceName: String = "journal"
  }

  object Item extends Item_book(Book) {
    /*GenScala.scala:806*/val Book = Item_book
    val Journal = Item_journal
    /*GenScala.scala:827*/type Book = Item_book
    type Journal = Item_journal
  }
  /*GenScala.scala:99*//*GenScala.scala:127*/

  class Journal(
    /*GenScala.scala:592*/val title: _rt_.AsnOctetString,
    val edition: _rt_.AsnOctetString
  ) extends _rt_.AsnSequence {
    override def _desc: _meta_.Journal = _meta_.Journal

    def copy(
        /*GenScala.scala:649*/title: _rt_.AsnOctetString = this.title,
        edition: _rt_.AsnOctetString = this.edition) = {
      Journal(
        /*GenScala.scala:631*/title,
        edition)
    }

    override def equals(that: Any): Boolean = {
      val other = try {
        that.asInstanceOf[Journal]
      } catch {
        case e: ClassCastException => return false
      }
      this.equals(other: Journal)
    }

    def equals(that: Journal): Boolean = {
      if (this.title != that.title)return false
      if (this.edition != that.edition)return false
      return true
    }

    override def hashCode(): Int = return (
      0
      ^ this.title.hashCode
      ^ this.edition.hashCode
    )

    /*GenScala.scala:670*//*GenScala.scala:694*/def title(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): Journal =
      this.copy(title = f(this.title))
    /*GenScala.scala:694*/def edition(f: (_rt_.AsnOctetString => _rt_.AsnOctetString)): Journal =
      this.copy(edition = f(this.edition))


    override def _child(name: String): Any = name match {case "title" => title
      case "edition" => edition
      case _ => throw new Exception("Member '" + name + "' does not exist.")
    }
  }

  object Journal extends Journal(
    "",
    ""
  ) {
    def apply(
        /*GenScala.scala:613*/title: _rt_.AsnOctetString,
        edition: _rt_.AsnOctetString): Journal = {
      new Journal(/*GenScala.scala:631*/title,
        edition)
    }
  }

  /*GenScala.scala:99*//*GenScala.scala:127*//*GenScala.scala:524*/

  case class Items(items: List[Item]) extends _rt_.AsnList {
    override def _desc: _meta_.Items = _meta_.Items

    def items(f: (List[Item] => List[Item])): Items =
      this.copy(items = f(this.items))
  }

  object Items extends Items(Nil) {
    def apply(items: Item*): Items = Items(items.toList)
  }
  /*GenScala.scala:44*/lazy val defaultBook = Book
    .isbn { _ => "default isbn" }
    .title { _ => "default title" }
    .author { _ => "default author" }
    .cover { _ => paperBack }
    .isInPrint { _ => true }
  /*GenScala.scala:44*/lazy val defaultOctetString = "Hello world"
  /*GenScala.scala:44*/lazy val defaultBooleanFalse = false
  /*GenScala.scala:44*/lazy val defaultBooleanTrue = true
  /*GenScala.scala:44*/lazy val defaultInteger = 123
}
