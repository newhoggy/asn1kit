/* This file was generated by asn1gen */

package moo.codec.ber

import org.asn1gen.{runtime => _rt_}
import org.asn1gen.{io => _io_}
import moo.{ASNEXAMPLES => _m_}

trait ASNEXAMPLES extends org.asn1gen.runtime.codec.BerEncoder {


  // Unmatched _m_.Books: SetOfType(Type(TypeReference(Book),List()))

  // Sequence type
  def encode(value: _m_.BookPrice): _io_.ByteStreamer = {
    encodeSequence(encodeData(value))
  }

  def encodeData(value: _m_.BookPrice): _io_.ByteStreamer = {
    // 3 -> isbn
    encode(value.isbn)
    // 3 -> price
    encode(value.price)
    _io_.ByteStreamer.nil
  }

  // Unmatched _m_.BookPrices: SetOfType(Type(TypeReference(Book),List()))

  // Enumerated type
  def encode(value: _m_.BookCover): _io_.ByteStreamer =
    encode(value.asInstanceOf[_rt_.AsnEnumeration])

  def encodeData(value: _m_.BookCover): _io_.ByteStreamer =
    encodeData(value.asInstanceOf[_rt_.AsnEnumeration])

  // Sequence type
  def encode(value: _m_.Book): _io_.ByteStreamer = {
    encodeSequence(encodeData(value))
  }

  def encodeData(value: _m_.Book): _io_.ByteStreamer = {
    // 3 -> isbn
    encode(value.isbn)
    // 3 -> title
    encode(value.title)
    // 3 -> author
    encode(value.author)
    // 3 -> cover
    encode(value.cover)
    // 3 -> isInPrint
    encode(value.isInPrint)
    _io_.ByteStreamer.nil
  }

  // Unmatched _m_.Journals: SetOfType(Type(TypeReference(Journal),List()))
  // Choice type
  def encode(value: _m_.Item): _io_.ByteStreamer = {
    _io_.ByteStreamer.nil
  }

  def encodeData(value: _m_.Item): _io_.ByteStreamer = {
    // 1 -> NamedType(Identifier(book),Type(TaggedType(Tag(Empty(),Number(1)),Empty(),Type(TypeReference(Book),List())),List()))
    // 1 -> NamedType(Identifier(journal),Type(TaggedType(Tag(Empty(),Number(2)),Empty(),Type(TypeReference(Journal),List())),List()))
    _io_.ByteStreamer.nil
  }

  // Sequence type
  def encode(value: _m_.Journal): _io_.ByteStreamer = {
    encodeSequence(encodeData(value))
  }

  def encodeData(value: _m_.Journal): _io_.ByteStreamer = {
    // 3 -> title
    encode(value.title)
    // 3 -> edition
    encode(value.edition)
    _io_.ByteStreamer.nil
  }

  // Unmatched _m_.Items: SetOfType(Type(TypeReference(Item),List()))
}
